The following are the secrets I found, most of which were stored insecurely; I then, used the Kubernetes secrets, which was securely used in admin-login-secrets, to change the yaml codes;

|-----------------------|-----------------------------|------------------------------|----------------------------|
| secret    		|     original storage file   |   new yaml file created      |	new access method         |
|-----------------------|-----------------------------|------------------------------|----------------------------|
| MYSQL_ROOT_PASSWORD   | django-deploy.yaml	      |django-mysql-pass-secret.yaml |	secretKeyRef	          |
|-----------------------|-----------------------------|------------------------------|----------------------------|
| MYSQL_ROOT_PASSWORD   | db-deployment.yaml	      |db-mysql-pass-secret.yaml     |	secretKeyRef          	  |
|-----------------------|-----------------------------|------------------------------|----------------------------|
| SECRET_KEY         	| settings.py        	      |django-key-secret.yaml	     |os.environ.get('SECRET_KEY')|
|-----------------------|-----------------------------|------------------------------|----------------------------|

I exactly followed the format used in the "django-admin-pass-secret.yaml" file for creating Kubernetes secrets and securely accessed them via their initial pods through environmental variables; Yet, when rebuilding the cluster and pods, I got an error because I was not using base64 encoding when writing the mySQL key "thisisatestthing.". I managed to solve the problem by substituting the "data" with "string data" in the mentioned yaml files.
In a similar manner, instead of hardcoding the value of the SECRET_KEY in "settings.py" file, I created another env variable and accessed it via the python os.environ.get method.
After, all of this changes, when I rebuilt the project, it worked just like before, with a difference that it's more secure now!
